<% add_to_packs("auto_numeric") %>
<%= horizontal_simple_form_for :payment, url: "", html: { id: :form_payment } do |f| %>
  <%= f.input :fees_paid, label: t('registrations.payment_form.labels.fees_paid'), hint: false do %>
    <p class="form-control-static"><%= format_money(@registration.paid_entry_fees) %></p>
  <% end %>
  <%= f.input :fees_remaining, label: t('registrations.payment_form.labels.fees_remaining'), hint: false do %>
    <p class="form-control-static"><%= format_money(@registration.outstanding_entry_fees) %></p>
  <% end %>

  <% if @competition.enable_donations %>
    <%= f.input :show_donation, as: :boolean, label: t('registrations.payment_form.labels.show_donation'), hint: false, input_html: { id: 'toggle-show-donation' } %>
    <%= f.input :donation, as: :money_amount, currency: @competition.currency_code, value: "0", label: t('registrations.payment_form.labels.donation'), hint: t('registrations.payment_form.hints.donation'), wrapper_html: { id: 'donation-amount-wrapper' } %>
  <% end %>

  <%= f.input :ajax_error, label: t('registrations.payment_form.labels.ajax_error'), hint: false, wrapper_html: { id: 'wca-error-wrapper', class: 'text-danger' } do %>
    <p class="form-control-static" id="wca-ajax-error"></p>
  <% end %>

  <hr/>
  <%= f.input :subtotal, label: t('registrations.payment_form.labels.subtotal'), hint: false do %>
    <p class="form-control-static" id="money-subtotal"><%= format_money(@registration.outstanding_entry_fees) %></p>
  <% end %>
  <div id="stripe-elements">
    <%= f.input :payment_information, label: t("registrations.payment_form.labels.payment_information"), hint: false, wrapper_html: { id: 'payment-element-wrapper' } do %>
      <div id="payment-element"></div>
    <% end %>
    <%= f.input :stripe_error, label: t('registrations.payment_form.labels.stripe_error'), hint: false, wrapper_html: { id: 'stripe-error-wrapper', class: 'text-danger' } do %>
      <p class="form-control-static" id="stripe-sdk-error"></p>
    <% end %>
  </div>



  <script src="https://www.paypal.com/sdk/js?client-id=<%= AppSecrets.PAYPAL_CLIENT_ID%>&merchant-id=95XC2UKUP2CFW&currency=<%= @registration.outstanding_entry_fees.currency.iso_code %>"></script>

  <script>

    // ----------
    // I18N and currency code data
    // ----------

    // From https://stripe.com/docs/js/appendix/supported_locales
    const supported_locales = ['ar', 'bg', 'cs', 'da', 'de', 'el', 'en', 'en-GB', 'es', 'es-419', 'et', 'fi', 'fil', 'fr', 'fr-CA', 'he', 'hr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'ms', 'mt', 'nb', 'nl', 'pl', 'pt-BR', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'th', 'tr', 'vi', 'zh', 'zh-HK', 'zh-TW'];
    const wca_locale = '<%= I18n.locale %>';

    const pendingAmountRuby = parseInt('<%= @registration.outstanding_entry_fees.cents %>');
    const currencyIsoCode = '<%= @registration.outstanding_entry_fees.currency.iso_code %>';

    // ----------
    // Init Stripe PaymentElement
    // ----------


    // deferred payment (show the PaymentElement without pre-loading a PaymentIntent)
    // as per https://stripe.com/docs/payments/accept-a-payment-deferred?type=payment

    const $paymentButton = $('#payment-button');
    $paymentButton.on('click', function(e) {
      e.preventDefault();

      toggleSaving(true);
      processPayment();
    });

    // ----------
    // Init jQuery variables and reset their state
    // ----------

    const $ajaxErrorRow = $('#wca-error-wrapper');
    $ajaxErrorRow.hide();

    const $stripeErrorRow = $('#stripe-error-wrapper');
    $stripeErrorRow.hide();

    const $paymentElementRow = $('#payment-element-wrapper');
    $paymentElementRow.removeClass("has-error");

    const $donationFormRow = $('#donation-amount-wrapper');
    $donationFormRow.hide();

    // we use a custom RubyMoney input that works with JS auto_numeric
    // unfortunately, it doesn't support simple_form's usual input_html options
    // and I am too afraid to change it (at the risk of breaking other parts of the website)
    // so we resort to manually fetching the input and its backing money field
    const $donationAmountField = $('input[name="payment[donation]"]');
    const $donationInputField = $(`input[data-target="#${$donationAmountField.attr('id')}"]`);

    // ----------
    // Toggles upon submitting/loading a payment
    // ----------

    function toggleSaving(saving) {
      $paymentButton.prop("disabled", saving);
      $paymentButton.toggleClass("saving", saving);

      $donationInputField.prop("disabled", saving);
      $donationInputField.toggleClass("saving", saving);

      if (saving) {
        $ajaxErrorRow.hide();
        $stripeErrorRow.hide();

        $paymentElementRow.removeClass("has-error");
      }
    }

    // ----------
    // Init PayPal PaymentElement
    // ----------

    paypal.Buttons({
        // Order is created on the server and the order id is returned
        createOrder: (data, actions) => {
          return fetch("/registration/<%= @registration.id %>/create-paypal-order/", {
            method: "post",
            body: JSON.stringify({ total_charge: getCurrentRubyAmount(), currency_code: currencyIsoCode }),
            headers: {
              'Content-Type': 'application/json' // Set the content type to JSON
            }
        })
        .then((response) => response.json())
        .then((order) => order.id);
        },

        // Finalize the transaction on the server after payer approval
        onApprove: (data, actions) => {
          return fetch(`/registration/<%= @registration.id %>/capture-paypal-payment/${data.orderID}`, {
            method: "post",
            body: JSON.stringify({ competition_id: '<%= @competition.id %>' }),
            headers: {
              'Content-Type': 'application/json' // Set the content type to JSON
            }
        })
        .then((response) => response.json())
        .then((orderData) => {
            // Successful capture! For dev/demo purposes:
            console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
            const transaction = orderData.purchase_units[0].payments.captures[0];
            alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);

            // When ready to go live, remove the alert and show a success message within this page. For example:
            // const element = document.getElementById('paypal-button-container');
            // element.innerHTML = '<h3>Thank you for your payment!</h3>';
            // Or go to another URL:  actions.redirect('thank_you.html');
        });
        }
    }).render('#payment-element');

    // ----------
    // Two-step workflow to handle payments
    //   1. Do simple frontend validations - catches cases like bad checksums (aka typos) before they reach our backend
    //   2. Create a PI and submit it to Stripe for handling
    // ----------

    async function processPayment() {
      const amount = getCurrentRubyAmount();

      if (isNaN(amount)) {
        alert('<%= t("registrations.payment_form.alerts.not_a_number") %>');
      } else {
        // Trigger form validation and wallet collection
        const { error: userInputError } = await elements.submit();

        if (userInputError) {
          handleStripeError(userInputError);
        } else {
          // NOTE: The factor two is tied to the string literal of the confirm message ("You're about to pay more than double")
          // If you change this threshold, please remember to change the translation string in en.yml!
          const amountOverThreshold = amount >= (2 * pendingAmountRuby);
          const confirmedAmount = !amountOverThreshold || confirm('<%= t("registrations.payment_form.alerts.amount_rather_high") %>')

          if (confirmedAmount) {
            // Fetches a payment intent and captures the client secret
            window.wca.cancelPendingAjaxAndAjax('load-payment-intent', {
              url: '<%= registration_payment_intent_path(@registration) %>',
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              data: JSON.stringify({ amount: amount }),
              success: submitPaymentIntent,
              error: handleAjaxError,
            });
          } else {
            toggleSaving(false);
          }
        }
      }
    }

    async function submitPaymentIntent(data) {
      const { client_secret: clientSecret } = data;

      const { error: stripeBackendError } = await stripe.confirmPayment({
        elements,
        clientSecret,
        confirmParams: {
          return_url: '<%= registration_payment_completion_url(@registration, host: EnvConfig.ROOT_URL) %>',
        }
      });

      if (stripeBackendError) {
        handleStripeError(stripeBackendError);
      }
    }

    // ----------
    // Error handling
    // ----------

    async function handleAjaxError(errorData) {
      toggleSaving(false);

      const $ajaxErrorDiv = $('#wca-ajax-error');

      const requestId = errorData.getResponseHeader('X-Request-Id');
      $ajaxErrorDiv.text(`${errorData.statusText}: ${requestId}`);

      $ajaxErrorRow.show();
    }

    function handleStripeError(error) {
      toggleSaving(false);

      const $stripeErrorDiv = $('#stripe-sdk-error');

      if (error.type === 'card_error' || error.type === 'validation_error') {
        $stripeErrorDiv.text(error.message);
      } else {
        $stripeErrorDiv.text('<%= t("registrations.payment_form.errors.stripe_failed") %>');
      }

      $paymentElementRow.addClass("has-error");
      $stripeErrorRow.show();
    }

    // ----------
    // Subtotal text and Stripe PaymentElement internal amount
    // ----------

    const $donationToggle = $('#toggle-show-donation');
    const $subtotalText = $('#money-subtotal');

    // PI is pre-loaded with the correct amount, no need to update it straight away
    updateSubtotal;

    function getCurrentRubyAmount() {
      if ($donationToggle.is(':checked')) {
        const donation = parseInt($donationAmountField.val() || 0);

        return pendingAmountRuby + donation;
      }

      return pendingAmountRuby;
    }

    function updateSubtotal() {
      const amount = getCurrentRubyAmount();

      const buttonDisabled = $paymentButton.prop("disabled");
      const buttonToggled = $paymentButton.hasClass("saving");

      // disable the payment button as long as we're relaying new payment information to Stripe
      $paymentButton.prop("disabled", true);
      $paymentButton.toggleClass("saving", true);

      window.wca.cancelPendingAjaxAndAjax('refresh-payment-subtotal', {
        url: '<%= registration_stripe_denomination_path %>',
        data: { amount: amount, currency_iso: currencyIsoCode },
        success: function (data) {
          const { stripe_amount: stripeAmount, human_amount: humanAmount } = data;

          $subtotalText.text(humanAmount);

          $paymentButton.prop("disabled", buttonDisabled);
          $paymentButton.toggleClass("saving", buttonToggled);
        },
        error: handleAjaxError,
      });
    }

    $donationToggle.on('change', function() {
      $donationFormRow.slideToggle(this.checked);
      updateSubtotal();
    });

    $donationAmountField.on('change', function() {
      updateSubtotal();
    });
  </script>
<% end %>

